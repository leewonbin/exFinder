<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.exfinder.dao.ExchangeRateDao">

<insert id="exchangeRateInsert">
	insert into exchangerate values(#{rate_date},#{c_code},#{ttb},#{tts},#{cash_buy},#{cash_sell},#{deal_bas_r},#{base_r})
</insert>
<select id="exchangeRateSelect" resultType="exchangeRateDto">
    SELECT * FROM exchangerate
    WHERE c_code = #{c_code}
      AND rate_date BETWEEN #{start_date}
      AND #{end_date}
    ORDER BY c_code, rate_date
</select>

<select id="exchangeRateSelect_base_r" parameterType="String" resultType="double">
    SELECT base_r FROM exchangerate
    WHERE c_code = #{c_code}
      AND rate_date = #{rate_date}
</select>

<select id="currSelect" resultType="string">
	select c_code from currency
</select>

<!-- C_CODE 컬럼에 특정 값 'a'가 존재하는지 확인하는 쿼리 -->
<select id="exchangeRate_column_checkValue" parameterType="String" resultType="int">
    SELECT COUNT(*) AS value_exists
    FROM exchangerate
    WHERE c_code = #{c_code}
</select>

<select id="exchangeRateSelect_today" resultType="exchangeRateDto">
    SELECT * FROM exchangerate
    WHERE c_code = #{c_code}
      AND rate_date = #{rate_date}
</select>


<select id="today_ComparisonValue" resultType="ExchangeRate_ComparisonValueDto">
   	WITH comparisonvalue AS (
    	SELECT 
        	c_code,
        	MAX(CASE WHEN source = 'notice' THEN deal_bas_r END) AS n_dr,
        	MAX(CASE WHEN source = 'exchange' THEN deal_bas_r END) AS e_dr
    	FROM (
        	SELECT c_code, deal_bas_r, 'notice' AS source,
            	   DENSE_RANK() OVER (PARTITION BY c_code ORDER BY rate_date DESC, annotime DESC) AS num
        	FROM noticeExchangerate
        	UNION ALL
        	SELECT c_code, deal_bas_r, 'exchange',
            	   DENSE_RANK() OVER (PARTITION BY c_code ORDER BY rate_date DESC) AS num
        	FROM exchangerate
    	) 
    	WHERE num = 1
    	GROUP BY c_code
	)
	SELECT 
    	c_code,
    	n_dr AS deal_bas_r,
    	n_dr - e_dr AS diff,
    	ROUND((n_dr - e_dr) / NULLIF(e_dr, 0) * 100, 2) AS diff_percent
	FROM comparisonvalue order by diff_percent desc
</select>

<select id="today_ComparisonValue_code" resultType="ExchangeRate_ComparisonValueDto">
   	WITH comparisonvalue AS (
    	SELECT 
        	c_code,
        	MAX(CASE WHEN source = 'notice' THEN deal_bas_r END) AS n_dr,
        	MAX(CASE WHEN source = 'exchange' THEN deal_bas_r END) AS e_dr
    	FROM (
        	SELECT c_code, deal_bas_r, 'notice' AS source,
            	   DENSE_RANK() OVER (PARTITION BY c_code ORDER BY rate_date DESC, annotime DESC) AS num
        	FROM noticeExchangerate
        	UNION ALL
        	SELECT c_code, deal_bas_r, 'exchange',
            	   DENSE_RANK() OVER (PARTITION BY c_code ORDER BY rate_date DESC) AS num
        	FROM exchangerate
    	) 
    	WHERE num = 1
    	GROUP BY c_code
	)
	SELECT 
    	c_code,
    	n_dr AS deal_bas_r,
    	n_dr - e_dr AS diff,
    	ROUND((n_dr - e_dr) / NULLIF(e_dr, 0) * 100, 2) AS diff_percent
	FROM comparisonvalue
	WHERE c_code = #{c_code}
</select>
<delete id="deleteAllCurr">
	delete from exchangerate
</delete>

</mapper>









